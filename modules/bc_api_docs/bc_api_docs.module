<?php

/**
 * @file
 * Api documentation module.
 */

use Drupal\bc_api_base\Annotation\ApiBaseDoc;
use Drupal\bc_api_base\Annotation\ApiDoc;
use Drupal\Component\Annotation\Doctrine\SimpleAnnotationReader;

/**
 * Implements hook_theme().
 */
function bc_api_docs_theme() {
  return [
    'api_endpoint' => [
      'variables' => ['endpoint_data' => NULL],
    ],
  ];
}

/**
 * Implements template_preprocess_hook().
 */
function template_preprocess_api_endpoint(&$vars) {
  $vars['#attached']['library'][] = 'bc_api_docs/code-prettify';

  $route = $vars['endpoint_data']['route'];
  $annotations = $vars['endpoint_data']['annotations'];

  $vars['data'] = [];
  $vars['data']['path'] = $route->getPath();
  $vars['data']['methods'] = implode(", ", $route->getMethods());
  $vars['data']['full_description'] = "";
  $vars['data']['access'] = [];

  $vars['data']['param_table'] = [
    '#type' => 'table',
    '#header' => ['Name', 'Type', 'Description', 'Required', 'Default'],
    '#rows' => [],
    '#responsive' => TRUE,
  ];

  foreach ($annotations as $annotation) {
    if (($annotation instanceof ApiDoc)) {

      $vars['data']['full_description'] = $annotation->description;

      if ($vars['endpoint_data']['resourceList'] && !empty($annotation->list_description)) {
        $vars['data']['full_description'] = $annotation->list_description;
      }
      elseif (!empty($annotation->resource_description)) {
        $vars['data']['full_description'] = $annotation->resource_description;
      }
    }

    if (($annotation instanceof ApiDoc || $annotation instanceof ApiBaseDoc) && isset($annotation->params)) {
      foreach ($annotation->params as $param) {
        if (!(!$vars['endpoint_data']['resourceList'] && $param->listOnly)) {
          $full_description = $param->description;

          $row = [
            ['data' => ["#markup" => "<code>" . $param->name . "</code>"]],
            $param->type,
            $full_description,
            ($param->required)? $param->required : "FALSE",
            $param->default,
          ];

          $vars['data']['param_table']['#rows'][$param->name] = $row;
        }
      }
    }
  }

  if (empty($vars['data']['param_table']['#rows'])) {
    unset($vars['data']['param_table']);
  }

  // Permissions.
  if ($roles = $route->getRequirement("_role")) {
    $vars['data']['access']['roles'] = ["#markup" => "Role(s): " . _process_route_access_str($roles)];
  }
  if ($permissions = $route->getRequirement("_permission")) {
    $vars['data']['access']['permissions'] = ["#markup" => "Permission(s): " . _process_route_access_str($permissions)];
  }

  // Get Sample Code.
  // $sample_code = _get_sample_api_call_code($vars, $route);
  $sample_code = "";

  $vars['data']['examples'] = [
    "#markup" => $sample_code,
  ];
}

/**
 * Process and format route access strings for documentation.
 */
function _process_route_access_str(string $str) {
  $str = str_replace([",", "+"], [" <b>AND</b> ", " <b>OR</b> "], $str);
  return $str;
}

/**
 * Gets sample API call code.
 */
function _get_sample_api_call_code(&$vars, $route) {
  $sample = "";

  // GETs.
  if (in_array("GET", $route->getMethods())) {
    $params = $route->getOption('parameters');

    if (empty($params)) {
      $full_host = \Drupal::request()->getSchemeAndHttpHost();

      $client = \Drupal::httpClient([
        'curl' => [
          CURLOPT_SSL_VERIFYPEER => FALSE,
          CURLOPT_SSL_VERIFYHOST => FALSE,
        ],
        'verify' => FALSE,
      ]);

      $request = $client->get($full_host . $route->getPath(), [
      // $request = $client->get("http://nab.local" . $route->getPath(), [
        'query' => [
          'api-key' => \Drupal::currentUser()->getAccount()->api_key,
          'limit' => 2,
        ]
      ]);
      // ksm((string) $request->getBody());
      // $response = ( json_decode($request->getBody()), JSON_PRETTY_PRINT);

      $sample = "";
      // $response;
    }
  }

  // POSTs.

  return $sample;
}
